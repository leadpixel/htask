- ignore: {name: "Avoid restricted function"} # 17 hints

- modules:
  - {name: [Conduit], as: Conduit}
  - {name: [Control.Concurrent.STM], as: STM}
  - {name: [Control.Concurrent], as: Conc}
  - {name: [Control.Exception], as: Ex}
  - {name: [Control.Monad.Free], as: Free}
  - {name: [Control.Monad.Reader], as: Reader}
  - {name: [Control.Monad.State], as: State}
  - {name: [Control.Monad.Trans.Reader], as: Reader}
  - {name: [Control.Monad.Trans.Writer], as: Writer}
  - {name: [Control.Monad.Trans.Except], as: Except}
  - {name: [Control.Monad.Trans.State], as: State}
  - {name: [Control.Monad.Trans], as: Trans}
  - {name: [Control.Monad.Writer], as: Writer}
  - {name: [Data.Aeson], as: Aeson}
  - {name: [Data.ByteString.Lazy], as: Lazy}
  - {name: [Data.ByteString], as: Strict}
  - {name: [Data.Text], as: Text}
  - {name: [Data.Yaml], as: Yaml}
  - {name: [Network.Wreq], as: Wreq}
  - {name: [System.IO], as: Sys}
  - {name: [Test.QuickCheck], as: QC}
  - {name: [HTask.Core], as: H}
  - {name: [Leadpixel.Events], as: V}
#   - {name: Control.Arrow, within: []}#  Certain modules are banned entirely

- functions:
#   - {name: unsafePerformIO, within: []}#  unsafePerformIO can only appear in no modules
  - {name: trace, within: []}
  - {name: traceShow, within: []}
  - {name: traceShowId, within: []}
  - {name: head, within: []}
  - {name: tail, within: []}
  - {name: read, within: []}
  - {name: fromJust, within: []}
  - {name: print, within: [Main]}
  - {name: putStrLn, within: [Main]}



- warn: {name: "reorder case", lhs: "case a of ; Just v -> x ; Nothing -> y", rhs: "case a of ; Nothing -> y ; Just v -> x "}
- warn: {name: "reorder case", lhs: "case a of ; Right v -> y ; Left e -> x ", rhs: "case a of ; Left e -> x ; Right v -> y"}
- warn: {name: "move pure", lhs: "case a of ; Nothing -> pure y ; Just v -> pure x", rhs: "pure $ case a of ; Just v -> x ; Nothing -> y"}
- warn: {name: "move pure", lhs: "case a of ; Left e -> pure x ; Right v -> pure y", rhs: "pure $ case a of ; Left e -> x ; Right v -> y"}
- warn: {name: "move pure", lhs: "maybe (pure f) (pure . g) x", rhs: "pure $ maybe f g x"}
- warn: {name: "assert blank", lhs: "assertEqual \"\" x y", rhs: "x @=? y"}
- warn: {name: "assert bool", lhs: "assertBool s x", rhs: "x @? s"}
- warn: {name: "remove brackets", lhs: "(f . g) . h", rhs: "f . g . h"}
- warn: {name: "prefer ($>) over (>> pure)", lhs: "f >> pure g", rhs: "f $> g"}
- warn: {name: "prefer maybe to case", lhs: "case x of ; Nothing -> f ; Just v -> g v", rhs: "maybe f g x"}
- warn: {name: "prefer either to case", lhs: "case x of ; Left e -> f e ; Right v -> g v", rhs: "either f g x"}
- warn: {name: "prefer fmap", lhs: "f <&> g", rhs: "g <$> f"}


- warn: {name: Use explicit module export list}

# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}

# Generalise map to fmap, ++ to <>
- group: {name: generalise, enabled: true}


# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule}#  Only within certain modules
- ignore: {name: Reduce duplication}
- ignore: {name: Use lambda-case}
